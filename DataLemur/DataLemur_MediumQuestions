Q1) User's Third Transaction

Assume you are given the table below on Uber transactions made by users.
Write a query to obtain the third transaction of every user. Output the user id, spend and transaction date.

A1) Idea: The concept used to tackle these questions is Window Functions. There are 4 kinds of window functions:
(a) ROW_NUMBER() - Assigns a unique row number for each record
(b) RANK() - Assigns a rank depending on the partition and order
(c) DENSE_RANK() - Minor difference between RANK() and DENSE_RANK() --> If two values have the same rank, the rank assigned to the following item varies - Refer Source
(d) NTILE(N) 

Source: https://www.sqlshack.com/overview-of-sql-rank-functions/

'''CODE'''

WITH ranked_transactions AS(
SELECT *, RANK() OVER (PARTITION BY user_id Order by Transaction_date) as ranked_data
)

Select User_id, spend, transaction_date
From ranked_transactions
Where ranked_data = 3
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q2) Sending vs. Opening Snaps

Assume you are given the tables below containing information on Snapchat users, their ages, and their time spent sending and opening snaps. 
Write a query to obtain a breakdown of the time spent sending vs. opening snaps (as a percentage of total time spent on these activities) for each age group.

Output the age bucket and percentage of sending and opening snaps. Round the percentage to 2 decimal places.

''' CODE '''
Select AB.age_bucket, 
ROUND(100.0* 
    SUM(CASE WHEN AC.activity_type = 'send' THEN AC.time_spent ELSE 0 END)/
    (SUM(CASE WHEN AC.activity_type = 'open' THEN AC.time_spent ELSE 0 END) + SUM(CASE WHEN AC.activity_type = 'send' THEN AC.time_spent ELSE 0 END)),2) as send_perc,
ROUND(100.0* 
    SUM(CASE WHEN AC.activity_type = 'open' THEN AC.time_spent ELSE 0 END)/
    (SUM(CASE WHEN AC.activity_type = 'open' THEN AC.time_spent ELSE 0 END) + SUM(CASE WHEN AC.activity_type = 'send' THEN AC.time_spent ELSE 0 END)),2) as open_perc
FROM age_breakdown AB
JOIN activities AC 
ON AB.user_id = AC.user_id
Group BY AB.age_bucket
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q3) Highest-Grossing Items
Assume you are given the table containing information on Amazon customers and their spending on products in various categories.
Identify the top two highest-grossing products within each category in 2022. Output the category, product, and total spend.

Link: https://datalemur.com/questions/sql-highest-grossing

A3) Idea: Need to group by Product and Sum(Spend) then RANK over Category and order by total_spend
- Clear in idea but implemented about 70% of the solution
- Logic was to use 2 CTE

''' CODE ''
WITH Product_total_spend AS(
  SELECT CATEGORY, PRODUCT, SUM(Spend) as total_spend
  FROM product_spend
  WHERE Transaction_date between '01/01/2022' and '12/31/2022'
  GROUP BY CATEGORY, PRODUCT
  ORDER BY total_spend DESC), 
  
RANKED_TOP_SPEND AS(
  SELECT *, RANK() OVER(PARTITION BY CATEGORY ORDER BY TOTAL_SPEND DESC) as ranking
  FROM Product_total_spend
)

SELECT CATEGORY, PRODUCT, total_spend
FROM RANKED_TOP_SPEND
WHERE ranking<=2
ORDER BY Category, ranking

* When it feels like you need to RANK OVER A GROUP BY OPERATION, USE 2 CTEs
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q4) Top 5 Artists

Assume there are three Spotify tables containing information about the artists, songs, and music charts. 
Write a query to determine the top 5 artists whose songs appear in the Top 10 of the global_song_rank table the highest number of times. From now on, we'll refer to this ranking number as "song appearances".

Output the top 5 artist names in ascending order along with their song appearances ranking (not the number of song appearances,
but the rank of who has the most appearances). The order of the rank should take precedence.

A4) ''' CODE '''
WITH artist_rank_info AS(
    Select songs.artist_id, gsr.song_id, Count(gsr.song_id) as song_appearance
    FROM global_song_rank gsr
    JOIN songs
    ON gsr.song_id = songs.song_id
    WHERE gsr.rank between 1 and 10
    GROUP BY songs.artist_id,gsr.song_id
    Order by song_appearance DESC
),
artist_appearances AS(
SELECT artist_id, SUM(song_appearance) as TOTAL_RANKS
FROM artist_rank_info
GROUP BY artist_id
ORDER BY TOTAL_RANKS DESC
),
final_output AS(
SELECT artists.artist_name, DENSE_RANK() OVER(ORDER BY AA.total_ranks DESC) as ARTIST_RANK
FROM artist_appearances AA
JOIN artists
ON AA.artist_id = artists.artist_id
ORDER BY ARTIST_RANK, artists.artist_name
)

SELECT artist_name, ARTIST_RANK
FROM final_output
WHERE ARTIST_RANK<=5

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q5) Supercloud Customer 
A Microsoft Azure Supercloud customer is a company which buys at least 1 product from each product category.
Write a query to report the company ID which is a Supercloud customer.
Link: https://datalemur.com/questions/supercloud-customer

A5) Idea: Find the sum of product category and check that the sum >=1 for each

'''CODE'''
With customer_count AS
(
    SELECT CC.customer_id, 
    SUM(CASE WHEN p.product_category = 'Analytics' THEN 1 ELSE 0 END) AS Analytics_count,
    SUM(CASE WHEN p.product_category = 'Containers' THEN 1 ELSE 0 END) AS Containers_count,
    SUM(CASE WHEN p.product_category = 'Compute' THEN 1 ELSE 0 END) AS Compute_count
    FROM customer_contracts CC
    JOIN products p
    ON CC.product_id = p.product_id
    GROUP BY CC.customer_id
)

SELECT customer_id 
FROM customer_count
WHERE Analytics_count >=1 and Containers_count>=1 and Compute_count>=1

* Above approach is wrong as number of product_categories are not known

''' Updated Code'''
Select CC.customer_id
FROM customer_contracts CC
JOIN products P
ON 
CC.product_id = P.product_id
WHERE P.Product_Category IN (
    select Distinct(Product_Category) as distinct_prod_categories
    FROM products
)
Group by CC.customer_id
HAVING Count(DISTINCT(P.Product_category))  >= 3
ORDER BY Count(DISTINCT(P.Product_category)) DESC, CC.customer_id DESC

* Update to the code:
''' update 2 '''
Select CC.customer_id
FROM customer_contracts CC
JOIN products P
ON 
CC.product_id = P.product_id
Group by CC.customer_id
HAVING Count(DISTINCT(P.Product_category))  >= (SELECT COUNT(Distinct(Product_Category)) FROM products)
ORDER BY Count(DISTINCT(P.Product_category)) DESC, CC.customer_id DESC

-> No need to use WHERE clause with Product_Category as HAVING is used to check on count
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q6) Odd and Even Measurements

Assume you are given the table containing measurement values obtained from a Google sensor over several days. 
Measurements are taken several times within a given day.
Write a query to obtain the sum of the odd-numbered and even-numbered measurements on a particular day, in two different columns.

link: https://datalemur.com/questions/odd-even-measurements

Idea: Get row_number by partitioning with date and take reminder to sum the values for even and odd

'''CODE'''
WITH measurements_with_rows AS(
    SELECT *, ROW_NUMBER() OVER(PARTITION BY CAST(measurement_time AS DATE) ORDER BY measurement_time) as row_no
    FROM measurements
)
SELECT CAST(measurement_time AS DATE),
SUM(CASE WHEN row_no%2=1 THEN measurement_value ELSE 0 END) as odd_sum,
SUM(CASE WHEN row_no%2=0 THEN measurement_value ELSE 0 END) as even_sum
FROM measurements_with_rows
GROUP BY CAST(measurement_time AS DATE)
ORDER BY CAST(measurement_time AS DATE)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q7) Histogram of Users and Purchases
Assume you are given the table on Walmart user transactions. 
Based on a user's most recent transaction date, write a query to obtain the users and the number of products bought.
Output the user's most recent transaction date, user ID and the number of products sorted by the transaction date in chronological order.

Link: https://datalemur.com/questions/histogram-users-purchases

A7) Idea: Perform dense_rank and partition by user_id and order by transaction_date DESC to get most recent transaction

''' CODE '''
WITH ranked_transactions AS
(
  SELECT *, DENSE_RANK() OVER(PARTITION BY user_id ORDER BY transaction_date DESC) AS ranked_data
  FROM user_transactions
)

Select transaction_date, user_id, Count(user_id) as purchase_count
FROM ranked_transactions
Where ranked_data = 1
Group By transaction_date,user_id
Order by transaction_date
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q8) Compressed Mode
You are trying to find the most common (aka the mode) number of items bought per order on Alibaba.
However, instead of doing analytics on all Alibaba orders, you have access to a summary table, which describes how many items were in an order (item_count), 
and the number of orders that had that many items (order_occurrences).
In case of multiple item counts, display the item_counts in ascending order.

Link: https://datalemur.com/questions/alibaba-compressed-mode

* Approach - Use rank and order by occurrences in DESC and display item count where rank = 1

SELECT item_count as MODE
FROM (
    SELECT item_count, RANK() OVER(Order by order_occurrences DESC) as ranked_order
    FROM items_per_order
) AS ranked_order_occurrences
WHERE ranked_order = 1
ORDER BY item_count

- Alternate approach:
* Find the max(order_occurences) and display the corresponding item_count

''' CODE '''
Select item_count
FROM items_per_order
WHERE order_occurences = (
                            Select MAX(order_occurences)
                            FROM items_per_order
                          )
Order by item_count

- 2nd Alternate approach:
* Use: MODE() WITHIN GROUP()

''' CODE '''
SELECT item_count
FROM items_per_order
WHERE order_occurrences = 
  (SELECT MODE() WITHIN GROUP (ORDER BY order_occurrences DESC) 
  FROM items_per_order)
ORDER BY item_count;
------------------------------------------------------------------------------------------------------------------------------------------
Q9) Rolling Average - Twitter

Given a table of tweet data over a specified time period, calculate the 3-day rolling average of tweets for each user. Output the user ID, tweet date, and rolling averages rounded to 2 decimal places.

Link: https://datalemur.com/questions/rolling-average-tweets

Select user_id, tweet_date, 
ROUND( 
  AVG(tweet_count) 
OVER (PARTITION BY user_id Order by tweet_date ROWS 2 PRECEDING),2) AS rolling_avg_3d
FROM tweets

------------------------------------------------------------------------------------------------------------------------------------------
Q10) JP Morgan - New Credit card analysis

https://datalemur.com/questions/card-launch-success

Your team at JPMorgan Chase is soon launching a new credit card. You are asked to estimate how many cards you'll issue in the first month.
Before you can answer this question, you want to first get some perspective on how well new credit card launches typically do in their first month.
Write a query that outputs the name of the credit card, and how many cards were issued in its launch month. The launch month is the earliest record in the monthly_cards_issued table for a given card. Order the results starting from the biggest issued amount.

- Code
With cte AS
(
  Select card_name, issued_amount,
  row_number() over 
  (partition by card_name order by issue_year, issue_month) as credit_card_row_no
  FROM monthly_cards_issued
)
Select card_name, issued_amount
FROM cte 
Where credit_card_row_no = 1
Order by issued_amount desc

- Alternate method - Approach: Uses first_value() - Window function where the first_value is returned after applying the partition and order by clauses.

SELECT DISTINCT card_name, 
first_value(issued_amount) OVER(PARTITION BY card_name ORDER BY make_date(issue_year,issue_month,'01')) as amount
FROM monthly_cards_issued
ORDER BY amount DESC;


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q11) Verizon - International Call % 


A phone call is considered an international call when the person calling is in a different country than the person receiving the call.

What percentage of phone calls are international? Round the result to 1 decimal.

Assumption:

The caller_id in phone_info table refers to both the caller and receiver.

https://datalemur.com/questions/international-call-percentage


CODE - 
With Caller_CTE AS
(
  Select pc.caller_id, pc.receiver_id, pi.country_id as caller_country
  FROM phone_calls pc, phone_info pi 
  Where pc.caller_id = pi.caller_id
),
Receiver_CTE AS
(
  Select pc.caller_id, pc.receiver_id, pi.country_id as receiver_country
  FROM phone_calls pc, phone_info pi 
  Where pc.receiver_id = pi.caller_id
)
Select Round
(100.0*Sum(Case when c.caller_country != r.receiver_country THEN 1 ELSE 0 
            End)/(select count(*) FROM phone_calls),1) as international_calls_pct
FROM Caller_CTE c
JOIN Receiver_CTE r
ON c.caller_id = r.caller_id and c.receiver_id = r.receiver_id 
-----------------
Better Solution
-----------------
Select 
ROUND(100.0*SUM(Case when caller.country != receiver.country THEN 1 ELSE 0 END)/Count(*),1) as international_call_perc
FROM phone_calls pc
JOIN phone_info caller ON pc.caller_id = caller.caller_id
JOIN phone_info receiver ON pc.receiver_id = pi.caller_id

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
