Q1) Share of Active Users
Output share of US users that are active. Active users are the ones with an "open" status in the table fb_active_users.

A) select (1.0*SUM(CASE WHEN status = 'open' THEN 1 ELSE 0 END))/(count(*)) AS 'usa_active_users'
from fb_active_users
where lower(country) = 'usa'
----------------------------------------------------------------------------------------------------------------------------
Q2) Top Three Classes

The marketing department wants to launch a new promotion for the most successful product classes.
Find the top 3 product classes according to their number of sales. In the event of a tie, output all results.

WITH CTE AS
(
    select  op.product_class as product_class, SUM(oo.cost_in_dollars * oo.units_sold) as number_of_sales
    from online_products op
    inner join online_orders oo
    ON op.product_id = oo.product_id
    Group by op.product_class
)
Select top 3 product_class
FROM CTE
ORDER BY number_of_sales DESC

(WRONG SOLUTION - Because I wrote top 3 and the question says if there's a tie, then output all results.)
WITH CTE AS
(
    select  op.product_class as product_class, DENSE_RANK() OVER(ORDER BY SUM(oo.cost_in_dollars * oo.units_sold) DESC) as sales_order
    from online_products op
    inner join online_orders oo
    ON op.product_id = oo.product_id
    Group by op.product_class
)
Select product_class
FROM CTE
Where sales_order <=3
-------------------------------------------------------------------------------------------------------------------------------------------------
Q3) Same Brand Purchases

The marketing department is aiming its next promotion at customers who have purchased products from two particular brands: Fort West and Golden.
You have been asked to prepare a list of customers who purchased products from both brands.


With CTE AS
(
    Select oo.customer_id as customer_id, 
    SUM(Case when lower(op.brand_name) = 'fort west' THEN 1 ELSE 0 END) AS 'FW_Count',
    SUM(Case when lower(op.brand_name) = 'golden' THEN 1 ELSE 0 END) AS 'Golden_Count'
    FROM online_products op
    JOIN online_orders oo
    ON op.product_id = oo.product_id
    GROUP BY oo.customer_id
)
select customer_id
FROM CTE
Where FW_Count > 0 AND Golden_Count > 0;
-------------------------------------------------------------------------------------------------------------------------------------------------
Q4) Blocked Users
You are given a table of users who have been blocked from Facebook, together with the date, duration, and the reason for the blocking. The duration is expressed as the number of days after blocking date and if this field is empty, this means that a user is blocked permanently.
For each blocking reason, count how many users were blocked in December 2021. Include both the users who were blocked in December 2021 and those who were blocked before but remained blocked for at least a part of December 2021.

(A) select block_reason, count(user_id) as blocked_users
from fb_blocked_users
Where cast(block_date as date) >= '2021-12-01' OR 
      (ABS(DATEDIFF(day,'2021-12-01',block_date)) < block_duration)
Group by block_reason

[Takeaways -> Did not factor the null case] 
-------------------------------------------------------------------------------------------------------------------------------------------------
Q5) Number of Conversations

Count the total number of distinct conversations on WhatsApp. Two users share a conversation if there is at least 1 message between them. Multiple messages between the same pair of users are considered a single conversation.

Idea 1 - Create some sort of mechanism to duplicate table to eliminate commutative pairs and only retain (A -> B and not A -> B and B-> A)
Use UNION for this because it eliminates duplicates and appends to a row

WITH CTE AS(
	Select sender as user1, receiver as user2 
	FROM table
	UNION
	Select receiver as user1, sender as user2
	From table)
Select Count(*) 
FROM CTE
Where user1 < user2

Takeaways: The last condition helps eliminate duplicate conversations and just count exclusive pairs

Idea 2 - Concat sender - receiver to create a distinct order and count the orders to get total conversations
Using Concat with case and get distinct options

WITH CTE AS
(
	Select Distinct (CASE WHEN sender > receiver THEN CONCAT(sender,'-',receiver) ELSE CONCAT(receiver,'-',sender) END) AS pairs
	FROM Table
)
Select count(*) FROM CTE 
-------------------------------------------------------------------------------------------------------------------------------------------------
Q6) First and Last Day Promotion Results

The marketing team is evaluating the performance of their previously ran promotions.
They are particularly interested in comparing the number of transactions on the first and last day of each promotion.
Segment the results by promotion and calculate the percentage of total transactions that occurred on these days.
Your output should include the promotion ID, the percentage of transactions on the first day, and the percentage of transactions on the last day.

With cte as
(
    Select oo.promotion_id, 
                SUM( CASE WHEN oo.date_sold = osp.start_date THEN 1 ELSE 0 END) As 'first_day_sales',
                SUM( CASE WHEN oo.date_sold = osp.end_date THEN 1 ELSE 0 END) As 'last_day_sales',
                count(oo.date_sold) as total_sales
    From online_orders oo
    join online_sales_promotions osp
    ON oo.promotion_id = osp.promotion_id
    Group by oo.promotion_id
)
Select promotion_id, 100.0*(cast(first_day_sales as float)/total_sales) as start_date_percentage,
    100.0*(cast(last_day_sales as float)/total_sales) as end_date_percentage
FROM cte
-------------------------------------------------------------------------------------------------------------------------------------------------
Q7) Highest Sales with Promotions

The marketing department is assessing the success of their promotional campaigns.
You have been asked to find which products sold the most units for each promotion.
Your output should contain the promotion ID, product ID, and corresponding total sales for the most successful product ID. In the case of a tie, output all results.

With CTE AS
(
Select promotion_id, product_id, SUM(units_sold) as total_sales, 
    DENSE_RANK() OVER (PARTITION BY promotion_id ORDER BY SUM(units_sold) DESC) as sales_rank
FROM online_orders
Group by promotion_id, product_id
)
Select promotion_id, product_id, total_sales
FROM CTE
Where sales_rank = 1
-------------------------------------------------------------------------------------------------------------------------------------------------
Q8) Products Never Sold

The VP of Sales feels that some product categories don't sell and can be completely removed from the inventory.
As a first pass analysis, they want you to find what percentage of product categories have never been sold.

WITH CTE AS
(
    Select count(distinct(op.product_category)) as categories_sold 
    FROM online_products op
    JOIN online_orders oo
    ON op.product_id = oo.product_id
)
Select (1 - (cast (categories_sold as float))/(Select count(*) from online_product_categories))*100.0 as 'percentage_of_unsold_categories'
FROM CTE

Takeaways: Many solutions used Right Join. Need to understand this.
-------------------------------------------------------------------------------------------------------------------------------------------------
Q9) Top Two Media Types

You have been tasked with finding the top two single-channel media types (ranked in decreasing order) that correspond to the most money the grocery chain had spent on its promotional campaigns.
Your output should contain the media type and the total amount spent on the advertising campaign. In the event of a tie, output all results and do not skip ranks.

WITH CTE AS
(
    Select media_type, SUM(cost) as total_spent, DENSE_RANK() OVER(ORDER BY SUM(Cost) DESC) as rnk
    FROM online_sales_promotions
    Group by media_type
)
Select media_type, total_spent
FROM CTE
WHERE rnk <=2
-------------------------------------------------------------------------------------------------------------------------------------------------
Q10) Customer Consumable Sales Percentages

Following a recent advertising campaign, you have been asked to compare the sales of consumable products across all brands.
Do the comparison of the brands by finding the percentage of unique customers (among all customers in the dataset) who purchased consumable products of some brand and then do the calculation for each brand.
Your output should contain the brand_name and percentage_of_customers rounded to the nearest whole number and ordered in descending order.

select op.brand_name, ROUND(100.0*CAST(count(distinct oo.customer_id) as float)/(Select Count(DISTINCT customer_id) FROM online_orders),1) AS pc_cust
from online_orders oo
join online_products op
ON oo.product_id = op.product_id
WHERE UPPER(op.product_family) = 'CONSUMABLE'
group by op.brand_name
order by pc_cust DESC
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q11) Sales Evaluation on Media Formats

The marketing department is evaluating the most effective promotional strategies for each product family.
You have been asked to find the total sales by media type for each category as a percentage of the overall sales for that family. For example the product family ELECTRONICS could be sold 57% through INTERNET and 43% through BROADCAST.
Your output should include the product family listed alphabetically, the media type, and the calculated percentage of sales rounded to the nearest whole number ordered from highest to lowest.


With CTE_1 AS(
    Select op.product_family, osp.media_type, 
        SUM(oo.cost_in_dollars*units_sold) AS total_sales
    FROM online_sales_promotions osp
    join online_orders oo
    ON osp.promotion_id = oo.promotion_id
    join online_products op
    ON oo.product_id = op.product_id
    Group by op.product_family, osp.media_type
),
CTE_2 AS(
    Select op.product_family,  
    SUM(oo.cost_in_dollars*units_sold) AS product_fam_sales
    From online_orders oo
    join online_products op
    ON oo.product_id = op.product_id    
    Group by op.product_family
)
Select t1.product_family, t1.media_type, 100.0*(cast(t1.total_sales as float)/(t2.product_fam_sales)) as percent_sales
From CTE_1 t1
JOIN CTE_2 t2
ON t1.product_family = t2.product_family
Order by t1.product_family 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q12) Successfully Sent Messages

Find the ratio of successfully received messages to sent messages.

select (count(recv.message_id))/(Select cast(count(message_id) as float) FROM facebook_messages_received)  as ratio
from facebook_messages_sent sent
left join facebook_messages_received recv
on sent.message_id = recv.message_id;

Takeaways: (*) Found this to be easy but made mistake on right joins {Don't take it lightly}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q13) Successful Lower Priced Product

The sales department wants to identify lower-priced products that still sell well.


Find product IDs that meet both of the following criteria:


⦁    The product has been sold at least twice (i.e., appeared in at least two different purchases).
⦁    The average sale price (cost_in_dollars) for that product is at least $3.


Return a list containing product IDs along with their corresponding brand name.


WITH CTE AS
(
Select oo.product_id, op.brand_name, count(oo.product_id) as total_transactions,
    AVG(cost_in_dollars) as avg_sale_price
FROM online_orders oo
JOIN online_products op
ON op.product_id = oo.product_id
Group by oo.product_id, op.brand_name
)
Select product_id, brand_name
FROM CTE
Where total_transactions >=2 AND avg_sale_price >=3
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q14) Acceptance Rate By Date

Calculate the friend acceptance rate for each date when friend requests were sent. A request is sent if action = sent and accepted if action = accepted. If a request is not accepted, there is no record of it being accepted in the table. The output will only include dates where requests were sent and at least one of them was accepted, as the acceptance rate can only be calculated for those dates. Show the results ordered from the earliest to the latest date.

With Sent_CTE 
AS(
    Select date, count(*) as total_sent
    FROM fb_friend_requests
    Where action = 'sent'
    Group by date
),
Accepted_CTE 
AS( 
    Select date, count(*) as total_accepted
    FROM fb_friend_requests
    EXISTS 
   (
    Select 1
    FROM fb_friend_requests fr2
    WHERE fr2.action = 'accepted' AND 
    fr1.user_id_sender = fr2.user_id_sender AND 
    fr1.user_id_receiver = fr2.user_id_receiver
   )
    AND action = 'sent'
    Group by date
)
Select Accepted_CTE.date, (total_accepted/total_sent)
FROM Accepted_CTE acte, Sent_CTE scte
ON acte.date = scte.date
Where scte.total_accepted > 0

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q15) Clicked Vs Non-Clicked Search Results

The question asks you to calculate two percentages based on search results. First, find the percentage of all search records clicked (clicked = 1) and in the top 3 positions. Second, find the percentage of all search records that were not clicked (clicked = 0) but in the top 3 positions. Both percentages are calculated with respect to the total number of search records and should be output in the same row as two columns.

With CTE1 AS
(   
    Select Count(*) as total_searches 
    FROM fb_search_events
),
CTE2 AS
(
    Select CAST(count(search_term) as float) as top_3_count
    FROM fb_search_events
    Where clicked = 1 AND search_results_position <=3
),
CTE3 AS
(
    Select CAST(count(search_term) as float) as top_3_non_count
    FROM fb_search_events
    Where clicked = 0 AND search_results_position <=3
)

Select 100.0*(top_3_count/total_searches) as clicked_percentage,
100.0*(top_3_non_count/total_searches) as non_clicked_percentage
FROM CTE1, CTE2, CTE3
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q16) Find whether the number of seniors works at Meta/Facebook is higher than its number of USA based employees

Find whether the number of senior workers (i.e., more experienced) at Meta/Facebook is higher than number of USA based employees at Facebook/Meta.
If the number of seniors is higher then output as 'More seniors'. Otherwise, output as 'More USA-based'.

With CTE AS
(
    select 
        sum(case when is_senior = 1 THEN 1 ELSE 0 END) AS total_senior_employees,
        sum(case when location = 'USA' THEN 1 ELSE 0 END) AS usa_employees
    from facebook_employees
)
Select (CASE WHEN total_senior_employees >= usa_employees THEN 'More Seniors' ELSE 'More USA-based'  END) AS Winner
FROM CTE
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q17) Friday's Likes Count

You have access to Facebook’s database, which contains tables related to user interactions. Your task is to calculate the total number of likes from friends for each date that falls on a Friday.
A like should only be counted if the user who liked the post is a friend of the user who made the post.
The output should contain two different columns: 'date' and 'likes'.

With friends_CTE AS
(
    Select f1.user_name1 as u1,f1.user_name2 as u2 
    FROM friendships f1 
    UNION
    Select f2.user_name2 as u1,f2.user_name1 as u2 
    FROM friendships f2
)
Select l.date_liked, count(*) as total_friday_likes
FROM friends_CTE f
JOIN user_posts up
ON up.user_name = f.u1 
JOIN likes l
ON l.post_id = up.post_id
Where datepart(weekday,l.date_liked) = 6 AND l.user_name = f.u2
Group by l.date_liked
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q18) Highest Energy Consumption

Find the date with the highest total energy consumption from the Meta/Facebook data centers. Output the date along with the total energy consumption across all data centers.

With cte1 AS
(
    Select date, consumption 
    FROM fb_na_energy
    Union All
    
    Select date, consumption 
    FROM fb_eu_energy
    Union All
    
    Select date, consumption 
    FROM fb_asia_energy
),
cte2 AS
(
    Select date, sum(consumption) as total_consumption, rank() over (order by sum(consumption) DESC) as rnk
    FROM cte1
    Group by date
)
Select date, total_consumption
From cte2
Where rnk = 1


Takeaways: (*) Impossible to solve without Union All. Union All helps to append rows with duplicates. So we get the entire data. (V useful to solve the issue)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q19) Liked' Posts

Find the number of posts which were reacted to with a like.

With CTE AS
(
    Select post_id, sum(CASE When reaction = 'like' THEN 1 ELSE 0 END) as total_likes
    FROM facebook_reactions
    Group by post_id
)
Select count(post_id) as number_of_posts
FROM CTE
Where total_likes >=1

Takeaways: (*) Noob way to solve this. Make it simpler with count(distinct())

Select count(distinct(post_id))
FROM facebook_reactions
Where reaction = 'like'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q20) Meta/Facebook Accounts

Calculate the ratio of accounts closed on January 10th, 2020 using the fb_account_status table.

Select CAST(Count(*) as float)/(select count(*) from fb_account_status where cast(date as date) = '2020-01-10')
FROM fb_account_status
Where status = 'closed' and cast(date as date) = '2020-01-10'

Takeaways: (*) Noob way to solve this. When dealing with a filtered numerator and a common denominator, if possible, put the filter in a sum(case) or count(case) to minimize rewriting the entire query.

Select (CAST(SUM(CASE when status = 'closed' THEN 1 ELSE 0 END) AS float)/(Count(*))
FROM table
Where Date(date) = '2020-01-10'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q21) Meta/Facebook Matching Users Pairs

Find matching pairs of Meta/Facebook employees such that they are both of the same nation, different age, same gender, and at different seniority levels.
Output ids of paired employees.

select f1.id as employee_1, f2.id as employee_2
from facebook_employees f1,facebook_employees f2
WHERE f1.location = f2.location AND 
      f1.age<>f2.age AND 
               f1.gender = f2.gender AND 
               f1.is_senior!=f2.is_senior

Takeaways: (*) Made the mistake of joining by id and then adding the where condition. Just join with the conditions. Cannot make this error.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q22) Most Active Users On Messenger

Meta/Facebook Messenger stores the number of messages between users in a table named 'fb_messages'. In this table 'user1' is the sender, 'user2' is the receiver, and 'msg_count' is the number of messages exchanged between them.
Find the top 10 most active users on Meta/Facebook Messenger by counting their total number of messages sent and received. Your solution should output usernames and the count of the total messages they sent or received

With user_cte AS
(
    Select user1 as user, msg_count
    FROM fb_messages 
    UNION ALL 
    select user2 as user, msg_count
    FROM fb_messages
),
msg_cte AS
(
    Select user, sum(msg_count) as user_activity, dense_rank() over(order by sum(msg_count) DESC) as rnk
    FROM user_cte
    Group by user
)
Select user, user_activity
FROM msg_cte
Where rnk <=10
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q23) Spam Posts

Calculate the percentage of spam posts in all viewed posts by day. A post is considered a spam if a string "spam" is inside keywords of the post. Note that the facebook_posts table stores all posts posted by users. The facebook_post_views table is an action table denoting if a user has viewed a post.

Select post_date, 100.0*CAST(SUM(CASE WHEN p.post_keywords LIKE '%spam%' THEN 1 ELSE 0 END)AS float)/(COUNT(*))
FROM facebook_posts p
JOIN facebook_post_views pv
ON p.post_id = pv.post_id
Group by post_date

Takeaways: (*) Need clarity regarding question
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q24) Top Posts Per Channel

Identify the top 3 posts with the highest like counts for each channel. Assign a rank to each post based on its like count, allowing for gaps in ranking when posts have the same number of likes. For example, if two posts tie for 1st place, the next post should be ranked 3rd, not 2nd. Exclude any posts with zero likes.
The output should display the channel name, post ID, post creation date, and the like count for each post.

WITH CTE AS
(
    Select channel_id, post_id, created_at, likes, RANK() OVER(PARTITION BY channel_id ORDER BY likes DESC) as post_rnk
    FROM posts
    Where likes > 0
)
Select channels.channel_name, post_id, created_at, likes
FROM CTE, channels
Where CTE.channel_id = channels.channel_id
AND post_rnk <=3
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q25) User Feature Completion

An app has product features that help guide users through a marketing funnel. Each feature has "steps" (i.e., actions users can take) as a guide to complete the funnel. What is the average percentage of completion for each feature?

With CTE_1 AS
(
    Select pf.feature_id, fr.user_id, IF(fr.step_reached is null,0,MAX(fr.step_reached)) as completed_steps, pf.n_steps 
    FROM facebook_product_features_realizations fr
    RIGHT JOIN facebook_product_features pf
    ON fr.feature_id = pf.feature_id
    Group by pf.feature_id, fr.user_id, pf.n_steps
)
Select feature_id, 100.0*(CAST(AVG(completed_steps/n_steps) AS float)) as avg_completion_percentage
FROM CTE_1
Group by feature_id

Takeaways: (*) Did not initially take RIGHT JOIN because forgot to consider features for which not even 1 step was completed NEED TO BE MORE CAREFUL.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

With load_cte as
(
    Select user_id, timestamp as load_date,
    DENSE_RANK() OVER(Partition by user_id ORDER BY timestamp DESC) as load_rnk
    FROM facebook_web_log
    Where action = 'page_load'
    Group by user_id, cast(timestamp as date)
),
exit_cte as
(
    Select user_id, timestamp as exit_date,
    DENSE_RANK() OVER(Partition by user_id ORDER BY timestamp ASC) as exit_rnk
    FROM facebook_web_log
    Where action = 'page_exit'
    Group by user_id, cast(timestamp as date)
)

Select lcte.user_id, AVG(ecte.exit_date - lcte.load_date) as avg_time_spent
FROM load_cte lcte
JOIN exit_cte ecte
ON lcte.user_id = ecte.user_id
Where cast(lcte.load_date as date) = cast(ecte.exit_date as date) AND load_rnk > exit_rnk
Group by lcte.user_id


Select user_id, timestamp as load_date,
DENSE_RANK() OVER(Partition by user_id, cast(timestamp as date) ORDER BY timestamp DESC) as load_rnk
FROM facebook_web_log
Where action = 'page_load'
Group by user_id, timestamp 

Select user_id, timestamp as exit_date,
DENSE_RANK() OVER(Partition by user_id, cast(timestamp as date) ORDER BY timestamp ASC) as exit_rnk
FROM facebook_web_log
Where action = 'page_exit'
Group by user_id, timestamp